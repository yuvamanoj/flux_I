---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: xdr-alert-capabilities
  namespace: xpp
  annotations:
    fluxcd.io/automated: "true"
    filter.fluxcd.io/chart-image: glob:*-xps89566.*
spec:
  releaseName: xdr-alert-capabilities
  forceUpgrade: true
  chart:
    git: git@github.ibm.com:managed-security/xdr-alert-capabilities
    ref: XPS-89566
    path: chart
  values:
    replicaCount: 1
    revisionHistoryLimit: 1
    image:
      repository: mss-docker.artifactory.swg-devops.com/xdr-alert-capabilities
      tag: 1.0.2-xps89566.94510b6a
    graphite:
      enabled: false
      host: dal09-prd-statsnode-01a.sec.ibm.com
      prefix: stg.k8s.master
    secretsDir: "/vault/secrets"
    serviceAccount:
      create: true
    podAnnotations:
      vault.hashicorp.com/agent-inject: 'true'
      vault.hashicorp.com/role: 'xdr-alert-capabilities'
      vault.hashicorp.com/agent-inject-secret-mdr.services.admin-token: "secret/modules/xdr-alert-capabilities/services"
      vault.hashicorp.com/agent-inject-template-mdr.services.admin-token: |-
        {{- with secret "secret/modules/xdr-alert-capabilities/services" -}}{{- .Data.data.SERVICES_ADMIN_TOKEN -}}{{- end }}
    ingress:
      enabled: true
      hosts:
      - host: xdr-alert-capabilities-ms-integration.dal09-dev.k8s-lab.sec.ibm.com
        paths:
        - /
      tls:
      - hosts:
        - xdr-alert-capabilities-ms-integration.dal09-dev.k8s-lab.sec.ibm.com
        secretName: xdr-alert-capabilities
    config:
      mdr:
        services:
          baseUrl: https://dal09-dev-services.sec.ibm.com
          timeoutSeconds: 30
      ruleengine:
        rules:
        - name: "Carbon Black - BAN_HASH"
          visible:
          - "#{device.machinePlatform == 'CB Cloud Single Tenant Response'}"
          requirements:
          - name: "Machine platform is 'CB Cloud Single Tenant Response'"
            condition: "#{device.machinePlatform == 'CB Cloud Single Tenant Response'}"
          - name: "Vendor is 'Carbon Black'"
            condition: "#{device.vendor == 'Carbon Black'}"
          - name: "Alert metadata contains md5 hash"
            condition: "#{alertMetadata['md5'] > ''}"
          payload:
            approved: "#{#isApproved(#root, 'BAN_HASH')}"
            assetCriticality: "#{#mapAssetCriticality(asset.criticality)}"
            assetName: "#{#getAssetName(asset)}"
            critical: "#{#isCritical(asset.criticality)}"
            deviceId: "#{device.id}"
            actionTarget: "#{alertMetadata['md5']}"
            actionType: "BAN_HASH"
            actionName: "Ban Hash for #{device.id}"
            alertId: "#{alert.id}"
            alertCreateTimeInSeconds: "#{alert.createTimeInSeconds}"
          metadata:
          - key: "Host Name"
            value: "#{alertMetadata['hostName'] ?: 'Unknown hostname'}"
          - key: "Hash md5"
            value: "#{alertMetadata['md5']}"
          - key: "Asset Name"
            value: "#{asset.assetNames.?[name > ''][0].name ?: 'Unknown asset name'}"
        - name: "Carbon Black Cloud - BAN_HASH"
          visible:
          - "#{device.machinePlatform == 'CB Cloud Multi-tenant'}"
          requirements:
          - name: "Machine platform is 'CB Cloud Multi-tenant'"
            condition: "#{device.machinePlatform == 'CB Cloud Multi-tenant'}"
          - name: "Vendor is 'Carbon Black'"
            condition: "#{device.vendor == 'Carbon Black'}"
          - name: "Alert metadata contains actorSha256 hash"
            condition: "#{alertMetadata['actorSha256'] > ''}"
          payload:
            approved: "#{#isApproved(#root, 'BAN_HASH')}"
            assetCriticality: "#{#mapAssetCriticality(asset.criticality)}"
            assetName: "#{#getAssetName(asset)}"
            critical: "#{#isCritical(asset.criticality)}"
            deviceId: "#{device.id}"
            actionTarget: "#{alertMetadata['actorSha256']}"
            actionType: "BAN_HASH"
            actionName: "Ban Hash for #{device.id}"
            alertId: "#{alert.id}"
            alertCreateTimeInSeconds: "#{alert.createTimeInSeconds}"
          metadata:
          - key: "Host Name"
            value: "#{alertMetadata['hostName'] ?: 'Unknown hostname'}"
          - key: "actorSha256 hash"
            value: "#{alertMetadata['actorSha256']}"
          - key: "Asset Name"
            value: "#{asset.assetNames.?[name > ''][0].name ?: 'Unknown asset name'}"
        - name: "Carbon Black Cloud - QUARANTINE_DEVICE"
          visible:
          - "#{device.machinePlatform == 'CB Cloud Multi-tenant'}"
          requirements:
          - name: "Machine platform is 'CB Cloud Multi-tenant'"
            condition: "#{device.machinePlatform == 'CB Cloud Multi-tenant'}"
          - name: "Vendor is 'Carbon Black'"
            condition: "#{device.vendor == 'Carbon Black'}"
          - name: "Alert metadata contains deviceId"
            condition: "#{alertMetadata['deviceId'] > ''}"
          payload:
            approved: "#{#isApproved(#root, 'QUARANTINE_DEVICE')}"
            assetCriticality: "#{#mapAssetCriticality(asset.criticality)}"
            assetName: "#{#getAssetName(asset)}"
            critical: "#{#isCritical(asset.criticality)}"
            deviceId: "#{device.id}"
            actionTarget: "#{alertMetadata['deviceId']}"
            actionType: "QUARANTINE_DEVICE"
            actionName: "Quarantine the device #{alertMetadata['deviceId']} for #{device.id}"
            alertId: "#{alert.id}"
            alertCreateTimeInSeconds: "#{alert.createTimeInSeconds}"
          metadata:
          - key: "Host Name"
            value: "#{alertMetadata['hostName'] ?: 'Unknown hostname'}"
          - key: "Carbon Black Device ID"
            value: "#{alertMetadata['deviceId']}"
          - key: "Asset Name"
            value: "#{asset.assetNames.?[name > ''][0].name ?: 'Unknown asset name'}"
        - name: "CrowdStrike - CONTAIN_HOST"
          visible:
          - "#{device.machinePlatform == 'CrowdStrike Falcon'}"
          requirements:
          - name: "Machine platform is 'CrowdStrike Falcon'"
            condition: "#{device.machinePlatform == 'CrowdStrike Falcon'}"
          - name: "Vendor is 'CrowdStrike'"
            condition: "#{device.vendor == 'CrowdStrike'}"
          - name: "Alert metadata contains host_device_id"
            condition: "#{alertMetadata['host_device_id'] > ''}"
          - name: "Alert metadata contains hostName"
            condition: "#{alertMetadata['hostName'] > ''}"
          payload:
            approved: "#{#isApproved(#root, 'CONTAIN_HOST')}"
            assetCriticality: "#{#mapAssetCriticality(asset.criticality)}"
            assetName: "#{#getAssetName(asset)}"
            critical: "#{#isCritical(asset.criticality)}"
            deviceId: "#{device.id}"
            actionTarget: "#{alertMetadata['host_device_id']}"
            actionType: "CONTAIN_HOST"
            actionName: "Contain host for #{device.id}"
            alertId: "#{alert.id}"
            alertCreateTimeInSeconds: "#{alert.createTimeInSeconds}"
          metadata:
          - key: "Host Device Id"
            value: "#{alertMetadata['host_device_id']}"
          - key: "Host Name"
            value: "#{alertMetadata['hostName']}"
          - key: "Asset Name"
            value: "#{asset.assetNames.?[name > ''][0].name ?: 'Unknown asset name'}"
        - name: "Microsoft Defender ATP - ISOLATE_MACHINE"
          visible:
          - "#{device.machinePlatform == 'Microsoft Defender ATP'}"
          requirements:
          - name: "Machine platform is 'Microsoft Defender ATP'"
            condition: "#{device.machinePlatform == 'Microsoft Defender ATP'}"
          - name: "Vendor is 'Microsoft'"
            condition: "#{device.vendor == 'Microsoft'}"
          - name: "Alert metadata contains machineId"
            condition: "#{alertMetadata['machineId'] > ''}"
          - name: "Alert metadata contains hostName"
            condition: "#{alertMetadata['hostName'] > ''}"
          payload:
            approved: "#{#isApproved(#root, 'ISOLATE_MACHINE')}"
            assetCriticality: "#{#mapAssetCriticality(asset.criticality)}"
            assetName: "#{#getAssetName(asset)}"
            critical: "#{#isCritical(asset.criticality)}"
            deviceId: "#{device.id}"
            actionTarget: "#{alertMetadata['machineId']}"
            actionType: "ISOLATE_MACHINE"
            actionName: "Isolate machine #{alertMetadata['machineId']} for #{device.id}"
            alertId: "#{alert.id}"
            alertCreateTimeInSeconds: "#{alert.createTimeInSeconds}"
          metadata:
          - key: "Machine ID on Microsoft Defender ATP"
            value: "#{alertMetadata['machineId']}"
          - key: "Host Name on Microsoft Defender ATP"
            value: "#{alertMetadata['hostName']}"
          - key: "Asset Name"
            value: "#{asset.assetNames.?[name > ''][0].name ?: 'Unknown asset name'}"
    env:
      DOCKER_REGISTRY_PULL_SECRET_NAME: docker-registry-pull
      LOG_FORMAT: json
      LOG_LEVEL: DEBUG
